const volumeSetup = function (
  appUtil = window.APP.util,
  elementIdMap = elementId
) {
  const volumeUnit =
    appUtil.getSettings('ticker_vol_unit')?.toUpperCase() ?? '';

  const elementSelector = elementIdMap[volumeUnit];
  const element = elementSelector ? $(elementSelector) : null;

  if (element && element.length) {
    element.prop('checked', true);
  }

  return appUtil.initCurrenciesList();
};

// ==============================================================================================

function generateUrl(params) {
  const baseUrl = 'http://testurl.bitfinx.com/?';

  const queryString = Object.keys(params)
    .sort()
    .filter((key) => params[key] !== '' && params[key] !== undefined)
    .map(
      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`
    )
    .join('&');

  return baseUrl + queryString;
}

const params = {
  width: 360,
  height: 300,
  locale: 'en',
  toolbar_bg: '',
  interval: '3h',
  pair: 'BTC_USD',
};

const res = generateUrl(params);

console.log(res);

// ==============================================================================================

// Set Up Redux Store:
// First, create actions and reducers in Redux. Define an
// action to store the fetched data, and in the reducer,
// handle this action to update the Redux state.

// Action
const setData = (data) => ({ type: 'SET_DATA', payload: data });

// Reducer
const dataReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_DATA':
      return { ...state, data: action.payload };
    default:
      return state;
  }
};
//  Fetch Data from API: In a React component (or a Redux async action,
//  if using redux-thunk or similar middleware), fetch data from the API.
//  Once the data is received, dispatch the action to store it in Redux.

// Using async/await for API call
const fetchData = async () => {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  dispatch(setData(data));
};
//  Connect React Component to
//  Redux Store: Use connect from
//  react-redux or the useSelector hook to access
//  the Redux state in your component.
//  Then, use the data from the store to render your UI.

// Functional Component with Hooks
import { useSelector } from 'react-redux';

const MyComponent = () => {
  const data = useSelector((state) => state.data);

  return (
    <div>
      {data.map((item) => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  );
};
// Additional Points:
// Error Handling: Discuss how you would handle errors during the API call
// and update the Redux state accordingly.

// Loading States: Mention managing loading states before the data
// is fetched and how this would be reflected in the UI.

// Optimization: Talk about memoizing selectors with reselect if needed,
// or using React's useMemo and useCallback to optimize performance.

// Best Practices: Briefly touch on best practices like keeping your Redux store normalized,
//  avoiding unnecessary re-renders, etc.
